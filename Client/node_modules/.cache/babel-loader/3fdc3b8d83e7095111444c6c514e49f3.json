{"ast":null,"code":"var _jsxFileName = \"/home/antonio/Documents/SovTech/Client/src/components/Custom/SearchBar/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport './SearchBar.css';\nimport React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { useStoreActions } from '../../../store';\nimport { ALL_PEOPLE, SEARCH_PERSON } from '../../../grapqhl/queries';\nimport { CustomInput } from '../../Utils/CustomInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const addPersonToState = useStoreActions(actions => actions.loadPerson);\n  const resetState = useStoreActions(actions => actions.resetOrLoadPage);\n  const {\n    data: initialState\n  } = useQuery(ALL_PEOPLE);\n  const [search, {\n    loading,\n    data\n  }] = useLazyQuery(SEARCH_PERSON);\n  useEffect(() => {\n    if (data) addPersonToState(data.searchPerson);\n  }, [data, addPersonToState]);\n\n  const handleSearch = () => {\n    if (!name || name === '') return;\n    search({\n      variables: {\n        personName: name\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setName('');\n    resetState(initialState.getAllPeople);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchbar\",\n    children: /*#__PURE__*/_jsxDEV(CustomInput, {\n      isLoading: loading,\n      value: name,\n      onChange: e => setName(e.target.value),\n      handleSubmit: handleSearch,\n      handleReset: handleReset,\n      placeholder: \"Search character by name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"H7sct+7LkShj8vr97TCDO8Vdv0M=\", false, function () {\n  return [useStoreActions, useStoreActions, useQuery, useLazyQuery];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/antonio/Documents/SovTech/Client/src/components/Custom/SearchBar/SearchBar.tsx"],"names":["React","useEffect","useState","useLazyQuery","useQuery","useStoreActions","ALL_PEOPLE","SEARCH_PERSON","CustomInput","SearchBar","name","setName","addPersonToState","actions","loadPerson","resetState","resetOrLoadPage","data","initialState","search","loading","searchPerson","handleSearch","variables","personName","handleReset","getAllPeople","e","target","value"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,0BAA1C;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAqB,EAArB,CAAhC;AACA,QAAMU,gBAAgB,GAAGP,eAAe,CAAEQ,OAAD,IAAaA,OAAO,CAACC,UAAtB,CAAxC;AACA,QAAMC,UAAU,GAAGV,eAAe,CAAEQ,OAAD,IAAaA,OAAO,CAACG,eAAtB,CAAlC;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAyBd,QAAQ,CAACE,UAAD,CAAvC;AACA,QAAM,CAACa,MAAD,EAAS;AAAEC,IAAAA,OAAF;AAAWH,IAAAA;AAAX,GAAT,IAA8Bd,YAAY,CAACI,aAAD,CAAhD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAJ,EAAUL,gBAAgB,CAACK,IAAI,CAACI,YAAN,CAAhB;AACX,GAFQ,EAEN,CAACJ,IAAD,EAAOL,gBAAP,CAFM,CAAT;;AAIA,QAAMU,YAAY,GAAG,MAAM;AACzB,QAAI,CAACZ,IAAD,IAASA,IAAI,KAAK,EAAtB,EAA0B;AAC1BS,IAAAA,MAAM,CAAC;AACLI,MAAAA,SAAS,EAAE;AACTC,QAAAA,UAAU,EAAEd;AADH;AADN,KAAD,CAAN;AAKD,GAPD;;AASA,QAAMe,WAAW,GAAG,MAAM;AACxBd,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,IAAAA,UAAU,CAACG,YAAY,CAACQ,YAAd,CAAV;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE,QAAC,WAAD;AACE,MAAA,SAAS,EAAGN,OADd;AAEE,MAAA,KAAK,EAAGV,IAFV;AAGE,MAAA,QAAQ,EAAIiB,CAAD,IAAYhB,OAAO,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAHhC;AAIE,MAAA,YAAY,EAAGP,YAJjB;AAKE,MAAA,WAAW,EAAGG,WALhB;AAME,MAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtCM;;GAAMhB,S;UAEcJ,e,EACNA,e,EAEYD,Q,EACKD,Y;;;KANzBM,S","sourcesContent":["import './SearchBar.css';\nimport React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { useStoreActions } from '../../../store';\nimport { ALL_PEOPLE, SEARCH_PERSON } from '../../../grapqhl/queries';\nimport { CustomInput } from '../../Utils/CustomInput';\n\nexport const SearchBar = () => {\n  const [name, setName] = useState<string | undefined>('');\n  const addPersonToState = useStoreActions((actions) => actions.loadPerson);\n  const resetState = useStoreActions((actions) => actions.resetOrLoadPage);\n\n  const { data: initialState } = useQuery(ALL_PEOPLE);\n  const [search, { loading, data }] = useLazyQuery(SEARCH_PERSON);\n\n  useEffect(() => {\n    if (data) addPersonToState(data.searchPerson);\n  }, [data, addPersonToState]);\n\n  const handleSearch = () => {\n    if (!name || name === '') return;\n    search({\n      variables: {\n        personName: name,\n      },\n    });\n  };\n\n  const handleReset = () => {\n    setName('');\n    resetState(initialState.getAllPeople);\n  };\n\n  return (\n    <div className=\"searchbar\">\n      <CustomInput\n        isLoading={ loading }\n        value={ name }\n        onChange={ (e: any) => setName(e.target.value) }\n        handleSubmit={ handleSearch }\n        handleReset={ handleReset }\n        placeholder=\"Search character by name\"\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}